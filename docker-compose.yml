version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: productify-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: productify
      POSTGRES_USER: productify
      POSTGRES_PASSWORD: productify_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - productify-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U productify -d productify"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: productify-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - productify-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: infra/Dockerfile.backend
    container_name: productify-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 5000
      DATABASE_URL: postgresql://productify:productify_password@database:5432/productify?schema=public
      JWT_SECRET: your-super-secure-jwt-secret-at-least-32-characters-long-dev
      JWT_REFRESH_SECRET: your-super-secure-refresh-secret-at-least-32-characters-long-dev
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
      LOG_LEVEL: debug
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./logs:/app/logs
    ports:
      - "5000:5000"
    networks:
      - productify-network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: infra/Dockerfile.frontend
    container_name: productify-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:5000/api
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:80"
    networks:
      - productify-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Development database management tool
  adminer:
    image: adminer:latest
    container_name: productify-adminer
    restart: unless-stopped
    environment:
      ADMINER_DEFAULT_SERVER: database
      ADMINER_DESIGN: pepa-linha
    ports:
      - "8080:8080"
    networks:
      - productify-network
    depends_on:
      - database

  # Nginx Load Balancer (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: productify-nginx
    restart: unless-stopped
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - productify-network
    depends_on:
      - frontend
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  productify-network:
    driver: bridge
    name: productify-network