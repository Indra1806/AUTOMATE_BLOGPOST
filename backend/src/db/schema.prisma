// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String
  password    String
  role        Role     @default(USER)
  isActive    Boolean  @default(true)
  avatar      String?
  bio         String?
  timezone    String   @default("UTC")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownedProjects    Project[]
  projectMembers   ProjectMember[]
  tasks            Task[]
  assignedTasks    Task[]          @relation("TaskAssignee")
  comments         Comment[]
  refreshTokens    RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  color       String        @default("#3B82F6")
  status      ProjectStatus @default(ACTIVE)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members ProjectMember[]
  tasks   Task[]
  tags    Tag[]

  @@map("projects")
}

model ProjectMember {
  id        String            @id @default(cuid())
  role      ProjectMemberRole @default(MEMBER)
  joinedAt  DateTime          @default(now())

  // Relations
  userId    String
  projectId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  startDate   DateTime?
  completedAt DateTime?
  estimatedHours Int?
  actualHours    Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  creatorId  String
  assigneeId String?
  projectId  String
  
  creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  assignee  User?    @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  comments  Comment[]
  tags      TaskTag[]
  subtasks  Task[]    @relation("SubTasks")
  parentTask Task?    @relation("SubTasks", fields: [parentTaskId], references: [id])
  parentTaskId String?

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  authorId String
  taskId   String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())

  // Relations
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     TaskTag[]

  @@unique([name, projectId])
  @@map("tags")
}

model TaskTag {
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([taskId, tagId])
  @@map("task_tags")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  ON_HOLD
}

enum ProjectMemberRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}